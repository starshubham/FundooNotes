// <auto-generated />

namespace RepositoryLayer.Services
{
    using CommonLayer.Models;
    using Microsoft.Extensions.Configuration;
    using RepositoryLayer.Context;
    using RepositoryLayer.Entities;
    using RepositoryLayer.Interface;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class CollabRL : ICollabRL
    {
        public readonly FundooContext fundooContext; //context class is used to query or save data to the database.
        
        public CollabRL(FundooContext fundooContext)
        {
            this.fundooContext = fundooContext;            
        }

        /// <summary>
        /// Method for adding Members to collaboration
        /// </summary>
        /// <param name="collabModel"></param>
        /// <returns></returns>
        public bool AddCollab(CollabModel collabModel)
        {
            try
            {               
                var noteData = this.fundooContext.NotesTable.Where(x => x.NoteId == collabModel.NoteId).FirstOrDefault();
                var userData = this.fundooContext.UserTables.Where(x => x.Email == collabModel.CollabEmail).FirstOrDefault();
                if(noteData != null && userData != null)
                {
                    Collaborator collab = new Collaborator();
                    collab.CollabEmail = collabModel.CollabEmail;
                    collab.NoteId = collabModel.NoteId;
                    collab.UserId = userData.Id;
                    //Adding the data to database
                    this.fundooContext.CollabsTable.Add(collab);
                }
                               
                //Save the changes in database
                int result = this.fundooContext.SaveChanges();
                if (result > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {

                throw;
            }            
        }

        /// <summary>
        /// Method for getting all collaborator
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Collaborator> GetAllCollabs()
        {
            try
            {
                var result = this.fundooContext.CollabsTable.ToList();
                return result;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        /// <summary>
        /// Method for getting collaborator using NoteId
        /// </summary>
        /// <param name="noteId"></param>
        /// <returns></returns>
        public IEnumerable<Collaborator> GetCollabsByNoteId(long noteId)
        {
            try
            {
                var result = this.fundooContext.CollabsTable.ToList().Where(x => x.NoteId == noteId);
                return result;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }

        /// <summary>
        /// Method for Remove member from collaboration
        /// </summary>
        /// <param name="collabID"></param>
        /// <returns></returns>
        public string ReomoveCollab (long collabID)
        {
            var collab = fundooContext.CollabsTable.Where(X => X.CollabID == collabID).SingleOrDefault();
            if (collab != null)
            {
                fundooContext.CollabsTable.Remove(collab);
                this.fundooContext.SaveChanges();
                return "Member removed from collaboration Successfully";
            }
            else
            {
                return null;
            }
        }
    }
}
